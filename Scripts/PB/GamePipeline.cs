// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePipeline.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Messages
  public partial class TestStruct : pb::IMessage {
    private static readonly pb::MessageParser<TestStruct> _parser = new pb::MessageParser<TestStruct>(() => (TestStruct)MessagePool.Instance.Fetch(typeof(TestStruct)));
    public static pb::MessageParser<TestStruct> Parser { get { return _parser; } }

    private int a_;
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      a_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2STestMessage : pb::IMessage {
    private static readonly pb::MessageParser<C2STestMessage> _parser = new pb::MessageParser<C2STestMessage>(() => (C2STestMessage)MessagePool.Instance.Fetch(typeof(C2STestMessage)));
    public static pb::MessageParser<C2STestMessage> Parser { get { return _parser; } }

    private int iD_;
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      iD_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class S2CTestMessage : pb::IMessage {
    private static readonly pb::MessageParser<S2CTestMessage> _parser = new pb::MessageParser<S2CTestMessage>(() => (S2CTestMessage)MessagePool.Instance.Fetch(typeof(S2CTestMessage)));
    public static pb::MessageParser<S2CTestMessage> Parser { get { return _parser; } }

    private string sz_ = "";
    public string Sz {
      get { return sz_; }
      set {
        sz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long longID_;
    public long LongID {
      get { return longID_; }
      set {
        longID_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_testInts_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> testInts_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TestInts {
      get { return testInts_; }
      set { testInts_ = value; }
    }

    private static readonly pb::FieldCodec<global::Protocol.TestStruct> _repeated_testStructs_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.TestStruct.Parser);
    private pbc::RepeatedField<global::Protocol.TestStruct> testStructs_ = new pbc::RepeatedField<global::Protocol.TestStruct>();
    public pbc::RepeatedField<global::Protocol.TestStruct> TestStructs {
      get { return testStructs_; }
      set { testStructs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Sz.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sz);
      }
      if (LongID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LongID);
      }
      testInts_.WriteTo(output, _repeated_testInts_codec);
      testStructs_.WriteTo(output, _repeated_testStructs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Sz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sz);
      }
      if (LongID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongID);
      }
      size += testInts_.CalculateSize(_repeated_testInts_codec);
      size += testStructs_.CalculateSize(_repeated_testStructs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sz_ = "";
      longID_ = 0;
      testInts_.Clear();
      for (int i = 0; i < testStructs_.Count; i++) { MessagePool.Instance.Recycle(testStructs_[i]); }
      testStructs_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Sz = input.ReadString();
            break;
          }
          case 16: {
            LongID = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            testInts_.AddEntriesFrom(input, _repeated_testInts_codec);
            break;
          }
          case 34: {
            testStructs_.AddEntriesFrom(input, _repeated_testStructs_codec);
            break;
          }
        }
      }
    }

  }

  public partial class C2SJoin : pb::IMessage {
    private static readonly pb::MessageParser<C2SJoin> _parser = new pb::MessageParser<C2SJoin>(() => (C2SJoin)MessagePool.Instance.Fetch(typeof(C2SJoin)));
    public static pb::MessageParser<C2SJoin> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class S2CMapInit : pb::IMessage {
    private static readonly pb::MessageParser<S2CMapInit> _parser = new pb::MessageParser<S2CMapInit>(() => (S2CMapInit)MessagePool.Instance.Fetch(typeof(S2CMapInit)));
    public static pb::MessageParser<S2CMapInit> Parser { get { return _parser; } }

    private int mapRow_;
    public int MapRow {
      get { return mapRow_; }
      set {
        mapRow_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_mapRandSeeds_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> mapRandSeeds_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> MapRandSeeds {
      get { return mapRandSeeds_; }
      set { mapRandSeeds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapRow != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapRow);
      }
      mapRandSeeds_.WriteTo(output, _repeated_mapRandSeeds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MapRow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapRow);
      }
      size += mapRandSeeds_.CalculateSize(_repeated_mapRandSeeds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapRow_ = 0;
      mapRandSeeds_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapRow = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            mapRandSeeds_.AddEntriesFrom(input, _repeated_mapRandSeeds_codec);
            break;
          }
        }
      }
    }

  }

  public partial class S2CMapRand : pb::IMessage {
    private static readonly pb::MessageParser<S2CMapRand> _parser = new pb::MessageParser<S2CMapRand>(() => (S2CMapRand)MessagePool.Instance.Fetch(typeof(S2CMapRand)));
    public static pb::MessageParser<S2CMapRand> Parser { get { return _parser; } }

    private int lineRandSeed_;
    public int LineRandSeed {
      get { return lineRandSeed_; }
      set {
        lineRandSeed_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LineRandSeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LineRandSeed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (LineRandSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineRandSeed);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      lineRandSeed_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LineRandSeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
